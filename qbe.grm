structure T = QbeTypes

%%
%name Qbe
%term
    EOF
  | TYPE | ALIGN | EXPORT | DATA | FUNCTION
  | ADD | SUB | DIV | MUL | NEG | UDIV | REM | UREM | OR | XOR | AND | SAR | SHR
  | SHL
  | STORED | STORES | STOREL | STOREW | STOREH | STOREB
  | LOADD | LOADS | LOADL | LOADW | LOADSW | LOADUW | LOADSH | LOADUH | LOADSB
  | LOADUB
  | ALLOC4 | ALLOC8 | ALLOC16
  | CEQD | CEQL | CEQS | CEQW | CGED | CGES | CGTD | CGTS | CLED | CLES | CLTD 
  | CLTS | CNED | CNEL | CNES | CNEW | COD  | COS  | CSGEL | CSGEW | CSGTL
  | CSGTW | CSLEL | CSLEW | CSLTL | CSLTW | CUGEL | CUGEW | CUGTL | CUGTW
  | CULEL | CULEW | CULTL | CULTW | CUOD | CUOS 
  | DTOSI | DTOUI | EXTS  | EXTSB | EXTSH | EXTSW | EXTUB | EXTUH | EXTUW
  | SLTOF | ULTOF | STOSI | STOUI | SWTOF | UWTOF | TRUNCD
  | CAST | COPY
  | CALL
  | VASTART | VAARG
  | PHI
  | JMP | JNZ | RET | RETW
  | NOP
  | W | L | S | D | B | H | Z
  | COMMA | LBRACE | RBRACE | LPAREN | RPAREN | EQ | DOTS
  | TYP of Atom.atom
  | GLO of Atom.atom
  | TMP of Atom.atom
  | LBL of Atom.atom
  | INT of int
  | STR of string

%pos int
%pure
%eop EOF
%noshift EOF

%value TYP (Atom.atom ":bogus")
%value GLO (Atom.atom "$bogus")
%value TMP (Atom.atom "%bogus")
%value LBL (Atom.atom "@bogus")
%value INT (1)
%value STR ("")

%keyword TYPE ALIGN EXPORT DATA FUNCTION
%prefer LBL

%nonterm
    module of T.module
  | defs of T.def list
  | def of  T.def
  | tylist of (T.ty * int) list
  | ty_num of T.ty * int
  | typ of T.ty
  | linkage of {export: bool}
  | align_opt of int option
  | data_fields of T.data_field list
  | data_field of T.data_field
  | data_items of T.data_item list
  | data_item of T.data_item
  | typ_opt of T.ty option
  | params of {params: (T.ty * Atom.atom) list, variadic: bool}
  | param_list of {params: (T.ty * Atom.atom) list, variadic: bool}
  | param of T.ty * Atom.atom
  | blocks of T.block list
  | block of T.block
  | stmts_opt of T.stmt list
  | stmts of T.stmt list
  | stmt of T.stmt
  | jump of T.instr
  | value of T.value
  | ret of T.value option -> T.instr
  | instr1v of T.instr
  | instr2v of T.instr
  | call of T.instr
  | args of (T.ty * T.value) list
  | arg_list of (T.ty * T.value) list
  | arg of T.ty * T.value
  | phiargs of (Atom.atom * T.value) list
  | phiarg of Atom.atom * T.value
  | instr1 of T.value -> T.instr
  | instr2 of T.value * T.value -> T.instr

%%

module : defs                           (defs)

defs :                                  ([])
     | def defs                         (def::defs)

def : TYPE TYP EQ LBRACE tylist RBRACE          (T.Type{name=TYP,align=NONE,items=tylist})
    | TYPE TYP EQ ALIGN INT LBRACE tylist RBRACE(T.Type{name=TYP,align=SOME INT,items=tylist})
    | TYPE TYP EQ ALIGN INT LBRACE INT RBRACE   (T.OpaqueType{name=TYP,align=INT1,size=INT2})
    | linkage DATA GLO EQ align_opt LBRACE data_fields RBRACE
        (T.Data {name = GLO,
                 exported = #export linkage,
                 align = align_opt,
                 fields = data_fields})
    | linkage FUNCTION typ_opt GLO LPAREN params RPAREN LBRACE blocks RBRACE
        (T.Function {name = GLO,
                     exported = #export linkage,
                     params = #params params,
                     variadic = #variadic params,
                     result = typ_opt,
                     blocks = blocks})

tylist : ty_num                           ([ty_num])
       | ty_num COMMA                     ([ty_num])
       | ty_num COMMA tylist              (ty_num::tylist)

ty_num : typ                              (typ, 1)
       | typ INT                          (typ, INT)

typ : W                                   (T.Word)
    | L                                   (T.Long)
    | S                                   (T.Single)
    | D                                   (T.Double)
    | B                                   (T.Byte)
    | H                                   (T.HalfWord)
    | TYP                                 (T.Aggregate TYP)

linkage :                                 ({export=false})
        | EXPORT                          ({export=true})

align_opt :                               (NONE)
          | ALIGN INT                     (SOME INT)

data_fields : data_field                  ([data_field])
            | data_field COMMA            ([data_field])
            | data_field COMMA data_fields(data_field::data_fields)

data_field : typ data_items               (T.DataFieldTy(typ, data_items))
           | Z INT                        (T.DataFieldZ INT)

data_items : data_item                    ([data_item])
           | data_item data_items         (data_item::data_items)

data_item : GLO                           (T.DataSymbol GLO)
          | STR                           (T.DataStr STR)
          | INT                           (T.DataConst INT)

typ_opt :                                 (NONE)
        | typ                             (SOME typ)

params :                                  ({params=[], variadic=false})
       | param_list                       (param_list)

param_list : param                        ({params=[param], variadic=false})
           | param COMMA                  ({params=[param], variadic=false})
           | param COMMA DOTS             ({params=[param], variadic=true})
           | param COMMA param_list       ({params = param::(#params param_list),
                                            variadic = #variadic param_list})

param : typ TMP                           ((typ, TMP))

blocks : block                            ([block])
       | block blocks                     (block::blocks)

block : LBL stmts_opt                     ({label=LBL, stmts=stmts_opt, jump=NONE})
      | LBL stmts_opt jump                ({label=LBL, stmts=stmts_opt, jump=SOME jump})

stmts_opt :                               ([])
          | stmts                         (stmts)

stmts : stmt                              ([stmt])
      | stmt stmts                        (stmt::stmts)

stmt : instr1v                            (T.Volatile instr1v)
     | instr2v                            (T.Volatile instr2v)
     | call                               (T.Volatile call)
     | TMP EQ typ instr1v                 (T.Assign(TMP, typ, instr1v))
     | TMP EQ typ instr2v                 (T.Assign(TMP, typ, instr2v))
     | TMP EQ typ call                    (T.Assign(TMP, typ, call))
     | TMP EQ typ PHI phiargs             (T.Volatile(T.Phi phiargs))
     | NOP                                (T.Volatile T.Nop)

jump : JMP LBL                            (T.Jmp LBL)
     | JNZ value COMMA LBL COMMA LBL      (T.Jnz(value, LBL1, LBL2))
     | ret                                (ret NONE)
     | ret value                          (ret(SOME value))

value : TMP                               (T.Temp TMP)
      | GLO                               (T.Global GLO)
      | INT                               (T.Const INT)

ret : RET                                 (T.Ret)
    | RETW                                (T.Retw)

instr1v : instr1 value                    (instr1 value)

instr2v : instr2 value COMMA value        (instr2(value1, value2))

call : CALL GLO LPAREN args RPAREN        (T.Call(GLO, args))

args :                                    ([])
     | arg_list                           (arg_list)

arg_list : arg                            ([arg])
         | arg COMMA                      ([arg])
         | arg COMMA arg_list             (arg::arg_list)

arg : typ value                           ((typ, value))

phiargs : phiarg                          ([phiarg])
        | phiarg COMMA phiargs            (phiarg::phiargs)

phiarg : LBL value                        ((LBL, value))

instr1 : NEG                              (T.Neg)
       | LOADD                            (T.Loadd)
       | LOADS                            (T.Loads)
       | LOADL                            (T.Loadl)
       | LOADW                            (T.Loadw)
       | LOADSW                           (T.Loadsw)
       | LOADUW                           (T.Loaduw)
       | LOADSH                           (T.Loadsh)
       | LOADUH                           (T.Loaduh)
       | LOADSB                           (T.Loadsb)
       | LOADUB                           (T.Loadub)
       | ALLOC4                           (T.Alloc4)
       | ALLOC8                           (T.Alloc8)
       | ALLOC16                          (T.Alloc16)
       | DTOSI                            (T.Dtosi)
       | DTOUI                            (T.Dtoui)
       | EXTS                             (T.Exts)
       | EXTSB                            (T.Extsb)
       | EXTSH                            (T.Extsh)
       | EXTSW                            (T.Extsw)
       | EXTUB                            (T.Extub)
       | EXTUH                            (T.Extuh)
       | EXTUW                            (T.Extuw)
       | SLTOF                            (T.Sltof)
       | ULTOF                            (T.Ultof)
       | STOSI                            (T.Stosi)
       | STOUI                            (T.Stoui)
       | SWTOF                            (T.Swtof)
       | UWTOF                            (T.Uwtof)
       | TRUNCD                           (T.Truncd)
       | CAST                             (T.Cast)
       | COPY                             (T.Copy)
       | VASTART                          (T.Vastart)
       | VAARG                            (T.Vaarg)

instr2 : ADD                              (T.Add)
       | SUB                              (T.Sub)
       | DIV                              (T.Div)
       | MUL                              (T.Mul)
       | UDIV                             (T.Udiv)
       | REM                              (T.Rem)
       | UREM                             (T.Urem)
       | OR                               (T.Or)
       | XOR                              (T.Xor)
       | AND                              (T.And)
       | SAR                              (T.Sar)
       | SHR                              (T.Shr)
       | SHL                              (T.Shl)
       | STORED                           (T.Stored)
       | STORES                           (T.Stores)
       | STOREL                           (T.Storel)
       | STOREW                           (T.Storew)
       | STOREH                           (T.Storeh)
       | STOREB                           (T.Storeb)
       | CEQD                             (T.Ceqd)
       | CEQL                             (T.Ceql)
       | CEQS                             (T.Ceqs)
       | CEQW                             (T.Ceqw)
       | CGED                             (T.Cged)
       | CGES                             (T.Cges)
       | CGTD                             (T.Cgtd)
       | CGTS                             (T.Cgts)
       | CLED                             (T.Cled)
       | CLES                             (T.Cles)
       | CLTD                             (T.Cltd)
       | CLTS                             (T.Clts)
       | CNED                             (T.Cned)
       | CNEL                             (T.Cnel)
       | CNES                             (T.Cnes)
       | CNEW                             (T.Cnew)
       | COD                              (T.Cod)
       | COS                              (T.Cos)
       | CSGEL                            (T.Csgel)
       | CSGEW                            (T.Csgew)
       | CSGTL                            (T.Csgtl)
       | CSGTW                            (T.Csgtw)
       | CSLEL                            (T.Cslel)
       | CSLEW                            (T.Cslew)
       | CSLTL                            (T.Csltl)
       | CSLTW                            (T.Csltw)
       | CUGEL                            (T.Cugel)
       | CUGEW                            (T.Cugew)
       | CUGTL                            (T.Cugtl)
       | CUGTW                            (T.Cugtw)
       | CULEL                            (T.Culel)
       | CULEW                            (T.Culew)
       | CULTL                            (T.Cultl)
       | CULTW                            (T.Cultw)
       | CUOD                             (T.Cuod)
       | CUOS                             (T.Cuos)
